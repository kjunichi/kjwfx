package com.cocolog_nifty.kjunichi.kjwfx;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.jdo.PersistenceManager;
import javax.jdo.Query;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.cocolog_nifty.kjunichi.kjwfx.ds.FxRate;
import com.cocolog_nifty.kjunichi.kjwfx.ds.Fxrecord2;

@SuppressWarnings("serial")
public class FxCheckServlet extends HttpServlet {
	private static final String DATE_PATTERN = "yyyyMMdd";

	@SuppressWarnings("unchecked")
	public void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		Logger logger = Logger.getLogger("FxCheckServlet");

		// ソニーバンクのレートを取得する
		MoneyKit mkit = new MoneyKit();
		mkit.updateRate();

		// 解析
		float eurTts = Float.parseFloat(mkit.getEurTts());
		PersistenceManager pm = PMF.get().getPersistenceManager();

		String queryStr = "SELECT FROM " + Fxrecord2.class.getName()
				+ " WHERE " + "isCompleted == isCompletedParam" + " && "
				+ "currency == currencyParam " + " ORDER BY ttb asc ";
		Query query = pm.newQuery(queryStr);
		query
				.declareParameters("Boolean isCompletedParam,String currencyParam");

		List<Fxrecord2> fxrecords = (List<Fxrecord2>) pm.newQuery(query)
				.execute(false, "EUR");
		boolean isMail = false;
		String mailErrorMsg = "";
		if (fxrecords.isEmpty()) {

		} else {

			for (Fxrecord2 g : fxrecords) {
				if (isMail) {
					break;
				}

				Float eurTtb = g.getTtb();
				if (eurTtb == null) {
					continue;
				}

				if (eurTtb + 1.5 < eurTts) {
					// 売値が買値より一定金額上だったら、アラートメールを送信する。
					isMail = true;

					// アラートメールを送信する。
					Mail.sendSellAlert(g.getAuthor().getEmail(), eurTtb
							.toString(), mkit.getEurTts());
				}
			}
		}

		// 買い時かチェック
		queryStr = "SELECT FROM " + Fxrecord2.class.getName()
				+ " WHERE isCompleted == isCompletedParam " + " && "
				+ " currency == currencyParam " + " ORDER BY ttb";
		Query query2 = pm.newQuery(queryStr);
		query2
				.declareParameters("Boolean isCompletedParam,String currencyParam");
		query2.setRange(0, 1);
		fxrecords = (List<Fxrecord2>) query2.execute(false, "EUR");
		if (fxrecords.isEmpty()) {

		} else {
			isMail = false;
			for (Fxrecord2 g : fxrecords) {
				if (isMail) {
					// 既にメールを送信していたら終了する。
					break;
				}
				Float eurTtb = g.getTtb();
				if (eurTtb == null) {
					continue;
				}

				logger.warning("eurTtb " + eurTtb);
				logger.warning("eurTts " + eurTts);

				//if (eurTtb - eurTts > 20.5) {
				if (eurTtb < 113) {
					// 買値が前回の買値より一定金額以下だったら、アラートメールを送信する。
					isMail = true;

					// アラートメールを送信する。
					Mail.sendBuyAlert(g.getAuthor().getEmail(), eurTtb
							.toString(), mkit.getEurTtb());
				}
			}
		}
		// 取得した為替レートを記録する。
		try {
			FxRate fxrate = new FxRate(new Date(), "EUR", new Float(mkit
					.getEurTtb()), new Float(mkit.getEurTts()));
			pm.makePersistent(fxrate);

			fxrate = new FxRate(new Date(), "USD", new Float(mkit.getUsdTtb()),
					new Float(mkit.getUsdTts()));
			pm.makePersistent(fxrate);
		} finally {
			pm.close();
		}

		resp.getWriter().print("text/plain\n\n");
		resp.getWriter().print("eurTts = " + mkit.getEurTts());
		resp.getWriter().print("isMail = " + isMail);
		resp.getWriter().print("mailErrorMsg = " + mailErrorMsg);
	}
}
